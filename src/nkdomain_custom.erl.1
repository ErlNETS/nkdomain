%% -------------------------------------------------------------------
%%
%% Copyright (c) 2015 Carlos Gonzalez Florido.  All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
%% -------------------------------------------------------------------
%%
%% @doc Behaviour for implementing custom operations over objetcs
%%
-module(nkdomain_custom).
-author('Carlos Gonzalez <carlosj.gf@gmail.com>').

-export([register/2]).
-export([get_syntax/3, updated/3]).



%% ===================================================================
%% Callbacks definitions
%% ===================================================================

%% Called to get the syntax to parse at load
-callback nkdomain_syntax(nkdomain:class(), nkdomain:obj_id(), nkdomain:obj()) ->
    {ok, map(), obj()} | {error, term()},


%% Called when a new specification must be loaded into the object
-callback updated(nkdomain:class(), nkdomain:obj_id(), nkdomain:obj()) ->
    ok.


%% ===================================================================
%% Public
%% ===================================================================

%% @doc Registers a service's syntax
%% It will be used for custom behaviours
-spec register(nkdomain:class(), module()) ->
    ok.

register(Class, Module) when is_atom(Class), is_atom(Module) ->
    ok = nkdomain_app:put({custom, Class}, Module).


%% ===================================================================
%% Private
%% ===================================================================

%% @doc Gets a service's syntax
-spec get_syntax(nkdomain:class(), nkdomain:obj_id(), map()) ->
    map().

get_syntax(Class, ObjId, Spec) ->
    case call(Class, nkdomain_syntax, [ObjId, Spec]) of
        {ok, Syntax, } -> Syntax;
        _ -> #{}
    end.


-spec updated(nkdomain:class(), nkdomain:obj_id(), nkdomain:obj()) ->
    ok | error.

updated(Class, ObjId, Obj) ->
    case call(Class, nkdomain_updated, [ObjId, Obj]) of
        ok ->
            ok;
        not_exported ->
            ok;
        _ ->
            error
    end.


%% @private
-spec call(nkdomain:class(), atom(), list()) ->
    not_exported | error | term.

call(Class, Fun, Args) ->
    case nkdomain_app:get({custom, Class}) of
        undefined ->
            not_exported;
        Mod ->
            try
                case erlang:function_exported(Mod, Fun, length(Args)+1) of
                    false ->
                        not_exported;
                    true ->
                        apply(Mod, Fun, [Class|Args])
                end
            catch
                C:E ->
                    Trace = erlang:get_stacktrace(),
                    lager:warning("Exception calling ~p:~p: ~p:~p\n~p",
                                  [Mod, Fun, C, E, Trace]),
                    error
            end
    end.






